diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/components/ble/device_manager/device_manager_peripheral.c nRF51_SDK_9.0.0_2e23562/components/ble/device_manager/device_manager_peripheral.c
--- nRF51_SDK_9.0.0_2e23562.orig/components/ble/device_manager/device_manager_peripheral.c	2015-07-10 00:21:08.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/components/ble/device_manager/device_manager_peripheral.c	2015-08-13 08:56:52.909845788 +0900
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2015 Esrille Inc.
+ *
+ * This file is a modified version of device_manager_peripheral.c provided by
+ * Nordic Semiconductor for using Esrille New Keyboard.
+ */
+
 /* Copyright (C) 2013 Nordic Semiconductor. All Rights Reserved.
  *
  * The information contained herein is property of Nordic Semiconductor ASA.
@@ -1065,7 +1072,7 @@ static __INLINE ret_code_t gatts_context
                 memset(&m_gatts_table[p_handle->connection_id], 0, sizeof(dm_gatts_context_t));
             }
         }
-        else
+        /*else*/  // for Esrille New Keyboard
         {
             if (m_gatts_table[p_handle->connection_id].size != 0)
             {
@@ -2912,3 +2919,64 @@ ret_code_t dm_handle_get(uint16_t conn_h
     }
     return err_code;
 }
+
+//
+// Extensions by Esrille Inc.
+//
+
+extern uint8_t switch_get_current_device(void);
+
+ret_code_t switch_whitelist_create(dm_application_instance_t const * p_handle,
+                               ble_gap_whitelist_t             * p_whitelist)
+{
+    VERIFY_MODULE_INITIALIZED();
+    NULL_PARAM_CHECK(p_handle);
+    NULL_PARAM_CHECK(p_whitelist);
+    NULL_PARAM_CHECK(p_whitelist->pp_addrs);
+    NULL_PARAM_CHECK(p_whitelist->pp_irks);
+    VERIFY_APP_REGISTERED(*p_handle);
+
+    DM_MUTEX_LOCK();
+
+    DM_LOG("[DM]: >> switch_whitelist_create\r\n");
+
+    uint32_t addr_count = 0;
+    uint32_t irk_count  = 0;
+
+    uint32_t index = switch_get_current_device();
+    if (index < DEVICE_MANAGER_MAX_BONDS) {
+        if ((irk_count < p_whitelist->irk_count) &&
+            ((m_peer_table[index].id_bitmap & IRK_ENTRY) == 0))
+        {
+            p_whitelist->pp_irks[irk_count] = &m_peer_table[index].peer_id.id_info;
+            m_irk_index_table[irk_count]    = index;
+            irk_count++;
+        }
+
+        if ((addr_count < p_whitelist->addr_count) &&
+            (m_peer_table[index].id_bitmap & ADDR_ENTRY) == 0)
+        {
+            p_whitelist->pp_addrs[addr_count] = &m_peer_table[index].peer_id.id_addr_info;
+            addr_count++;
+        }
+    }
+
+    p_whitelist->addr_count = addr_count;
+    p_whitelist->irk_count  = irk_count;
+
+    if (0 < addr_count) {
+        app_trace_log("switch_whitelist_create [%lu]: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X.\r\n", index,
+            m_peer_table[index].peer_id.id_addr_info.addr[0],
+            m_peer_table[index].peer_id.id_addr_info.addr[1],
+            m_peer_table[index].peer_id.id_addr_info.addr[2],
+            m_peer_table[index].peer_id.id_addr_info.addr[3],
+            m_peer_table[index].peer_id.id_addr_info.addr[4],
+            m_peer_table[index].peer_id.id_addr_info.addr[5]);
+    }
+
+    DM_TRC("[DM]: << switch_whitelist_create\r\n");
+
+    DM_MUTEX_UNLOCK();
+
+    return NRF_SUCCESS;
+}
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/components/drivers_nrf/gpiote/nrf_drv_gpiote.c nRF51_SDK_9.0.0_2e23562/components/drivers_nrf/gpiote/nrf_drv_gpiote.c
--- nRF51_SDK_9.0.0_2e23562.orig/components/drivers_nrf/gpiote/nrf_drv_gpiote.c	2015-07-10 00:21:08.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/components/drivers_nrf/gpiote/nrf_drv_gpiote.c	2015-08-13 05:41:37.529554913 +0900
@@ -456,6 +456,8 @@ uint32_t nrf_drv_gpiote_in_event_addr_ge
     return nrf_gpiote_event_addr_get(event);
 }
 
+// cf. https://devzone.nordicsemi.com/question/40670/sdk81-app_gpiote-and-nrf_drv_gpiote-conflict/?answer=40671#post-id-40671
+#if 0
 void GPIOTE_IRQHandler(void)
 {
     uint32_t status = 0;
@@ -537,4 +539,175 @@ void GPIOTE_IRQHandler(void)
         }
     }
 }
+#else
+typedef void (*app_gpiote_event_handler_t)(uint32_t event_pins_low_to_high,
+                                           uint32_t event_pins_high_to_low);
+
+/**@brief GPIOTE user type. */
+typedef struct
+{
+    uint32_t                   pins_mask;             /**< Mask defining which pins user wants to monitor. */
+    uint32_t                   pins_low_to_high_mask; /**< Mask defining which pins will generate events to this user when toggling low->high. */
+    uint32_t                   pins_high_to_low_mask; /**< Mask defining which pins will generate events to this user when toggling high->low. */
+    uint32_t                   sense_high_pins;       /**< Mask defining which pins are configured to generate GPIOTE interrupt on transition to high level. */
+    app_gpiote_event_handler_t event_handler;         /**< Pointer to function to be executed when an event occurs. */
+} gpiote_user_t;
+
+extern uint32_t        m_enabled_users_mask;          /**< Mask for tracking which users are enabled. */
+extern uint8_t         m_user_array_size;             /**< Size of user array. */
+extern uint8_t         m_user_count;                  /**< Number of registered users. */
+extern gpiote_user_t * mp_users;                      /**< Array of GPIOTE users. */
+
+void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins);
+void sense_level_disable(uint32_t pins);
+
+void GPIOTE_IRQHandler(void)
+{
+    uint32_t status = 0;
+    uint32_t input = 0;
+    uint32_t i;
+    uint32_t pins_changed        = 1;
+    uint32_t pins_sense_enabled  = 0;
+    uint32_t pins_sense_disabled = 0;
+    uint32_t pins_state          = NRF_GPIO->IN;
+
+      /* collect PORT status event, if event is set read pins state. Processing is postponed to the
+     * end of interrupt. */
+    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
+    {
+        nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
+        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
+        input = nrf_gpio_pins_read();
+    }
+
+    while (pins_changed)
+    {
+        // Check all users.
+        for (i = 0; i < m_user_count; i++)
+        {
+            gpiote_user_t * p_user = &mp_users[i];
+
+            // Check if user is enabled.
+            if (((1 << i) & m_enabled_users_mask) != 0)
+            {
+                uint32_t transition_pins;
+                uint32_t event_low_to_high = 0;
+                uint32_t event_high_to_low = 0;
+
+                pins_sense_enabled |= (p_user->pins_mask & ~pins_sense_disabled);
+
+                // Find set of pins on which there has been a transition.
+                transition_pins = (pins_state ^ ~p_user->sense_high_pins) & (p_user->pins_mask & ~pins_sense_disabled);
+
+                sense_level_disable(transition_pins);
+                pins_sense_disabled |= transition_pins;
+                pins_sense_enabled  &= ~pins_sense_disabled;
+
+                // Call user event handler if an event has occurred.
+                event_high_to_low |= (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
+                event_low_to_high |= (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
+
+                if ((event_low_to_high | event_high_to_low) != 0)
+                {
+                    p_user->event_handler(event_low_to_high, event_high_to_low);
+                }
+            }
+        }
+
+        // Second read after setting sense.
+        // Check if any pins with sense enabled have changed while serving this interrupt.
+        pins_changed = (NRF_GPIO->IN ^ pins_state) & pins_sense_enabled;
+        pins_state  ^= pins_changed;
+    }
+        // Now re-enabling sense on all pins that have sense disabled.
+    // Note: a new interrupt might fire immediatly.
+    for (i = 0; i < m_user_count; i++)
+    {
+        gpiote_user_t * p_user = &mp_users[i];
+
+        // Check if user is enabled.
+        if (((1 << i) & m_enabled_users_mask) != 0)
+        {
+            if (pins_sense_disabled & p_user->pins_mask)
+            {
+                sense_level_toggle(p_user, pins_sense_disabled & p_user->pins_mask);
+            }
+        }
+    }
+
+    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
+    nrf_gpiote_events_t event = NRF_GPIOTE_EVENTS_IN_0;
+    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
+    for (i = 0; i < NUMBER_OF_GPIO_TE; i++)
+    {
+        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
+        {
+            nrf_gpiote_event_clear(event);
+            status |= mask;
+        }
+        mask <<= 1;
+        /* Incrementing to next event, utilizing the fact that events are grouped together
+         * in ascending order. */
+        event = (nrf_gpiote_events_t)((uint32_t)event + sizeof(uint32_t));
+    }
+
+    /* collect PORT status event, if event is set read pins state. Processing is postponed to the
+     * end of interrupt. */
+    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
+    {
+        nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
+        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
+        input = nrf_gpio_pins_read();
+    }
+
+    /* Process pin events. */
+    if (status & NRF_GPIOTE_INT_IN_MASK)
+    {
+        mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
+        for (i = 0; i < NUMBER_OF_GPIO_TE; i++)
+        {
+            if (mask & status)
+            {
+                nrf_drv_gpiote_pin_t pin = nrf_gpiote_event_pin_get(i);
+                nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(i);
+                nrf_drv_gpiote_evt_handler_t handler = channel_handler_get(i);
+                handler(pin,polarity);
+            }
+            mask <<= 1;
+        }
+    }
+
+    if (status & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
+    {
+        /* Process port event. */
+        for (i = 0; i < GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS; i++)
+        {
+            if (m_cb.port_handlers_pins[i] != PIN_NOT_USED)
+            {
+                uint8_t pin_and_sense = m_cb.port_handlers_pins[i];
+                nrf_drv_gpiote_pin_t pin = (pin_and_sense & ~SENSE_FIELD_MASK);
+                nrf_drv_gpiote_evt_handler_t handler = channel_handler_get(channel_port_get(pin));
+                if (handler)
+                {
+                    nrf_gpiote_polarity_t polarity =
+                            (nrf_gpiote_polarity_t)((pin_and_sense & SENSE_FIELD_MASK) >> SENSE_FIELD_POS);
+                    mask = 1 << pin;
+                    nrf_gpio_pin_sense_t sense = nrf_gpio_pin_sense_get(pin);
+                    if (((mask & input) && (sense==NRF_GPIO_PIN_SENSE_HIGH)) ||
+                       (!(mask & input) && (sense==NRF_GPIO_PIN_SENSE_LOW))  )
+                    {
+                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
+                        {
+                            nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
+                                    NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
+                            nrf_gpio_cfg_sense_set(pin, next_sense);
+                        }
+                        handler(pin, polarity);
+                    }
+                }
+            }
+        }
+    }
+}
+#endif
 //lint -restore
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/components/libraries/gpiote/app_gpiote.c nRF51_SDK_9.0.0_2e23562/components/libraries/gpiote/app_gpiote.c
--- nRF51_SDK_9.0.0_2e23562.orig/components/libraries/gpiote/app_gpiote.c	2015-07-10 00:21:08.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/components/libraries/gpiote/app_gpiote.c	2015-08-13 05:41:37.529554913 +0900
@@ -32,10 +32,10 @@ typedef struct
 STATIC_ASSERT(sizeof(gpiote_user_t) <= GPIOTE_USER_NODE_SIZE);
 STATIC_ASSERT(sizeof(gpiote_user_t) % 4 == 0);
 
-static uint32_t        m_enabled_users_mask;          /**< Mask for tracking which users are enabled. */
-static uint8_t         m_user_array_size;             /**< Size of user array. */
-static uint8_t         m_user_count;                  /**< Number of registered users. */
-static gpiote_user_t * mp_users = NULL;               /**< Array of GPIOTE users. */
+uint32_t        m_enabled_users_mask;          /**< Mask for tracking which users are enabled. */
+uint8_t         m_user_array_size;             /**< Size of user array. */
+uint8_t         m_user_count;                  /**< Number of registered users. */
+gpiote_user_t * mp_users = NULL;               /**< Array of GPIOTE users. */
 
 
 /**@brief Function for toggling sense level for specified pins.
@@ -43,7 +43,7 @@ static gpiote_user_t * mp_users = NULL;
  * @param[in]   p_user   Pointer to user structure.
  * @param[in]   pins     Bitmask specifying for which pins the sense level is to be toggled.
  */
-static void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins)
+void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins)
 {
     uint32_t pin_no;
 
@@ -74,7 +74,7 @@ static void sense_level_toggle(gpiote_us
 }
 
 
-static void sense_level_disable(uint32_t pins)
+void sense_level_disable(uint32_t pins)
 {
     uint32_t pin_no;
 
@@ -91,7 +91,8 @@ static void sense_level_disable(uint32_t
 }
 
 
-
+// cf. https://devzone.nordicsemi.com/question/40670/sdk81-app_gpiote-and-nrf_drv_gpiote-conflict/?answer=40671#post-id-40671
+#if 0
 /**@brief Function for handling the GPIOTE interrupt.
  */
 void GPIOTE_IRQHandler(void)
@@ -161,6 +162,7 @@ void GPIOTE_IRQHandler(void)
         }
     }
 }
+#endif
 
 
 /**@brief Function for sense disabling for all pins for specified user.
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/custom_board.h nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/custom_board.h
--- nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/custom_board.h	1970-01-01 09:00:00.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/custom_board.h	2015-08-13 05:54:26.000000000 +0900
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2015 Esrille Inc. All Rights Reserved.
+ *
+ * This file is supplied to you for use solely and exclusively on the
+ * Esrille New Keyboard - NISSE from Esrille Inc.
+ *
+ * Thie file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+ * CONDITIONS OF ANY KIND, either express or implied. See the file NOTICE
+ * for copying permission.
+ */
+
+#ifndef CUSTOM_H__
+#define CUSTOM_H__
+
+#define LED_0          22   // L1
+#define LED_1          20   // L2
+#define LED_2          18   // L3
+
+#define BSP_LED_0      LED_0
+#define BSP_LED_1      LED_1
+#define BSP_LED_2      LED_2
+
+#define LEDS_LIST {LED_0, LED_1, LED_2}
+
+#define BUTTONS_NUMBER 0
+#define LEDS_NUMBER    3
+#define BUTTONS_MASK   0x00000000
+#define LEDS_MASK      (BSP_LED_0_MASK | BSP_LED_1_MASK | BSP_LED_2_MASK)
+#define LEDS_INV_MASK  0x00000000
+
+#define BSP_LED_0_MASK    (1<<LED_0)
+#define BSP_LED_1_MASK    (1<<LED_1)
+#define BSP_LED_2_MASK    (1<<LED_2)
+
+#define RX_PIN_NUMBER  9
+#define TX_PIN_NUMBER  8
+#define CTS_PIN_NUMBER 24       // Not used
+#define RTS_PIN_NUMBER 25       // Not used
+#define HWFC           false
+
+#endif  // CUSTOM_H__
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/dfu_gcc_nrf51.ld nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/dfu_gcc_nrf51.ld
--- nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/dfu_gcc_nrf51.ld	2015-07-10 00:21:10.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/dfu_gcc_nrf51.ld	2015-09-08 22:51:12.055753698 +0900
@@ -14,12 +14,12 @@ MEMORY
   FLASH (rx) : ORIGIN = 0x3C000, LENGTH = 0x3C00
 
   /** RAM Region for bootloader. This setting is suitable when used with s110, s120, s130, s310. */
-  RAM (rwx) :  ORIGIN = 0x20002C00, LENGTH = 0x5380
+  RAM (rwx) :  ORIGIN = 0x20002C00, LENGTH = 0x1380
 
   /** Location of non initialized RAM. Non initialized RAM is used for exchanging bond information
    *  from application to bootloader when using buttonluss DFU OTA. 
    */
-  NOINIT (rwx) :  ORIGIN = 0x20007F80, LENGTH = 0x80
+  NOINIT (rwx) :  ORIGIN = 0x20003F80, LENGTH = 0x80
 
   /** Location of bootloader setting in at the last flash page. */
   BOOTLOADER_SETTINGS (rw) : ORIGIN = 0x0003FC00, LENGTH = 0x0400
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/main.c nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/main.c
--- nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/main.c	2015-07-10 00:21:10.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/main.c	2015-09-08 23:00:04.594276542 +0900
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2015 Esrille Inc.
+ *
+ * This file is a modified version of bootloader/main.c provided by
+ * Nordic Semiconductor for using Esrille New Keyboard.
+ */
+
 /* Copyright (c) 2013 Nordic Semiconductor. All Rights Reserved.
  *
  * The information contained herein is property of Nordic Semiconductor ASA.
@@ -50,17 +57,12 @@
 #include "pstorage_platform.h"
 #include "nrf_mbr.h"
 
-#if BUTTONS_NUMBER < 1
-#error "Not enough buttons on board"
-#endif
-
 #if LEDS_NUMBER < 1
 #error "Not enough LEDs on board"
 #endif
 
 #define IS_SRVC_CHANGED_CHARACT_PRESENT 1                                                       /**< Include the service_changed characteristic. For DFU this should normally be the case. */
 
-#define BOOTLOADER_BUTTON               BSP_BUTTON_3                                            /**< Button used to enter SW update mode. */
 #define UPDATE_IN_PROGRESS_LED          BSP_LED_2                                               /**< Led used to indicate that DFU is active. */
 
 #define APP_TIMER_PRESCALER             0                                                       /**< Value of the RTC1 PRESCALER register. */
@@ -71,6 +73,16 @@
 
 #define SCHED_QUEUE_SIZE                20                                                      /**< Maximum number of events in the scheduler queue. */
 
+//
+// NISSE part
+//
+
+#define MAX_ROW                 8
+#define MAX_COLUMN              12
+
+static const uint8_t            row_pins[MAX_ROW] = { 3, 4, 6, 5, 13, 31, 29, 30 };
+static const uint8_t            column_pins[MAX_COLUMN] = { 16, 15, 12, 10, 11, 7, 1, 0, 2, 23, 21, 28 };
+
 
 /**@brief Callback function for asserts in the SoftDevice.
  *
@@ -111,10 +123,31 @@ static void timers_init(void)
  */
 static void buttons_init(void)
 {
-    nrf_gpio_cfg_sense_input(BOOTLOADER_BUTTON,
-                             BUTTON_PULL, 
-                             NRF_GPIO_PIN_SENSE_LOW);
+    for (int8_t row = MAX_ROW - 1; 0 <= row; --row) {
+        nrf_gpio_pin_clear(row_pins[row]);
+        nrf_gpio_cfg_output(row_pins[row]);
+    }
 
+    for (uint8_t column = 0; column < MAX_COLUMN; ++column) {
+        nrf_gpio_cfg_input(column_pins[column], NRF_GPIO_PIN_PULLUP);
+    }
+}
+
+
+static bool button_is_pushed(uint8_t row, uint8_t column)
+{
+    int8_t r;
+    bool result;
+
+    for (r = MAX_ROW - 1; 0 <= r; --r) {
+        nrf_gpio_cfg_input(row_pins[r], NRF_GPIO_PIN_NOPULL);
+    }
+    nrf_gpio_cfg_output(row_pins[row]);
+    result = !nrf_gpio_pin_read(column_pins[column]);
+    for (r = MAX_ROW - 1; 0 <= r; --r) {
+        nrf_gpio_cfg_output(row_pins[r]);
+    }
+    return result;
 }
 
 
@@ -229,7 +262,7 @@ int main(void)
     }
 
     dfu_start  = app_reset;
-    dfu_start |= ((nrf_gpio_pin_read(BOOTLOADER_BUTTON) == 0) ? true: false);
+    dfu_start |= (button_is_pushed(2, 5) && button_is_pushed(4, 0) ? true: false);       // Left FN-ESC in Rev. 5
     
     if (dfu_start || (!bootloader_app_is_valid(DFU_BANK_0_REGION_START)))
     {
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/Makefile nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/Makefile
--- nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/Makefile	1970-01-01 09:00:00.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/Makefile	2015-09-08 23:09:33.826101643 +0900
@@ -0,0 +1,225 @@
+PROJECT_NAME := dfu_dual_bank_ble_s110_nisse
+
+export OUTPUT_FILENAME
+#MAKEFILE_NAME := $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
+MAKEFILE_NAME := $(MAKEFILE_LIST)
+MAKEFILE_DIR := $(dir $(MAKEFILE_NAME) )
+
+TEMPLATE_PATH = ../../../../../../components/toolchain/gcc
+ifeq ($(OS),Windows_NT)
+include $(TEMPLATE_PATH)/Makefile.windows
+else
+include $(TEMPLATE_PATH)/Makefile.posix
+endif
+
+MK := mkdir
+RM := rm -rf
+
+#echo suspend
+ifeq ("$(VERBOSE)","1")
+NO_ECHO :=
+else
+NO_ECHO := @
+endif
+
+# Toolchain commands
+CC       		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-gcc"
+AS       		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-as"
+AR       		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-ar" -r
+LD       		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-ld"
+NM       		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-nm"
+OBJDUMP  		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-objdump"
+OBJCOPY  		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-objcopy"
+SIZE    		:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-size"
+
+#function for removing duplicates in a list
+remduplicates = $(strip $(if $1,$(firstword $1) $(call remduplicates,$(filter-out $(firstword $1),$1))))
+
+#source common to all targets
+C_SOURCE_FILES += \
+$(abspath ../../../../../../components/libraries/util/app_error.c) \
+$(abspath ../../../../../../components/libraries/scheduler/app_scheduler.c) \
+$(abspath ../../../../../../components/libraries/timer/app_timer.c) \
+$(abspath ../../../../../../components/libraries/timer/app_timer_appsh.c) \
+$(abspath ../../../../../../components/libraries/bootloader_dfu/bootloader.c) \
+$(abspath ../../../../../../components/libraries/bootloader_dfu/bootloader_settings.c) \
+$(abspath ../../../../../../components/libraries/bootloader_dfu/bootloader_util.c) \
+$(abspath ../../../../../../components/libraries/crc16/crc16.c) \
+$(abspath ../../../../../../components/libraries/bootloader_dfu/dfu_dual_bank.c) \
+$(abspath ../../../../../../components/libraries/bootloader_dfu/dfu_init_template.c) \
+$(abspath ../../../../../../components/libraries/bootloader_dfu/dfu_transport_ble.c) \
+$(abspath ../../../../../../components/libraries/hci/hci_mem_pool.c) \
+$(abspath ../../../../../../components/libraries/util/nrf_assert.c) \
+$(abspath ../../../../../../components/drivers_nrf/hal/nrf_delay.c) \
+$(abspath ../../../../../../components/drivers_nrf/pstorage/pstorage_raw.c) \
+$(abspath ../../../dfu_ble_svc.c) \
+$(abspath ../../../main.c) \
+$(abspath ../../../../../../components/ble/common/ble_advdata.c) \
+$(abspath ../../../../../../components/ble/common/ble_conn_params.c) \
+$(abspath ../../../../../../components/ble/ble_services/ble_dfu/ble_dfu.c) \
+$(abspath ../../../../../../components/ble/common/ble_srv_common.c) \
+$(abspath ../../../../../../components/toolchain/system_nrf51.c) \
+$(abspath ../../../../../../components/softdevice/common/softdevice_handler/softdevice_handler.c) \
+$(abspath ../../../../../../components/softdevice/common/softdevice_handler/softdevice_handler_appsh.c) \
+
+#assembly files common to all targets
+ASM_SOURCE_FILES  = $(abspath ../../../../../../components/toolchain/gcc/gcc_startup_nrf51.s)
+
+#includes common to all targets
+INC_PATHS  = -I$(abspath ../../../config/dfu_dual_bank_ble_s110_nisse)
+INC_PATHS += -I$(abspath ../../../config)
+INC_PATHS += -I$(abspath ../../..)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/util)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/timer)
+INC_PATHS += -I$(abspath ../../../../../../components/toolchain)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/bootloader_dfu)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/scheduler)
+INC_PATHS += -I$(abspath ../../../../../../components/softdevice/s110/headers)
+INC_PATHS += -I$(abspath ../../../../../bsp)
+INC_PATHS += -I$(abspath ../../../../../../components/drivers_nrf/pstorage)
+INC_PATHS += -I$(abspath ../../../../../../components/toolchain/gcc)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/bootloader_dfu/ble_transport)
+INC_PATHS += -I$(abspath ../../../../../../components/device)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/hci)
+INC_PATHS += -I$(abspath ../../../../../../components/softdevice/common/softdevice_handler)
+INC_PATHS += -I$(abspath ../../../../../../components/libraries/crc16)
+INC_PATHS += -I$(abspath ../../../../../../components/ble/ble_services/ble_dfu)
+INC_PATHS += -I$(abspath ../../../../../../components/drivers_nrf/hal)
+INC_PATHS += -I$(abspath ../../../../../../components/ble/common)
+
+OBJECT_DIRECTORY = _build
+LISTING_DIRECTORY = $(OBJECT_DIRECTORY)
+OUTPUT_BINARY_DIRECTORY = $(OBJECT_DIRECTORY)
+
+# Sorting removes duplicates
+BUILD_DIRECTORIES := $(sort $(OBJECT_DIRECTORY) $(OUTPUT_BINARY_DIRECTORY) $(LISTING_DIRECTORY) )
+
+#flags common to all targets
+CFLAGS  = -DSWI_DISABLE0
+CFLAGS += -DBOARD_CUSTOM
+CFLAGS += -DSOFTDEVICE_PRESENT
+CFLAGS += -DNRF51
+CFLAGS += -DS110
+CFLAGS += -D__HEAP_SIZE=0
+CFLAGS += -DBLE_STACK_SUPPORT_REQD
+CFLAGS += -DBSP_DEFINES_ONLY
+CFLAGS += -mcpu=cortex-m0
+CFLAGS += -mthumb -mabi=aapcs --std=gnu99
+CFLAGS += -Wall -Werror -Os
+CFLAGS += -mfloat-abi=soft
+# keep every function in separate section. This will allow linker to dump unused functions
+CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
+CFLAGS += -fno-builtin --short-enums
+
+# keep every function in separate section. This will allow linker to dump unused functions
+LDFLAGS += -Xlinker -Map=$(LISTING_DIRECTORY)/$(OUTPUT_FILENAME).map
+LDFLAGS += -mthumb -mabi=aapcs -L $(TEMPLATE_PATH) -T$(LINKER_SCRIPT)
+LDFLAGS += -mcpu=cortex-m0
+# let linker to dump unused sections
+LDFLAGS += -Wl,--gc-sections
+# use newlib in nano version
+LDFLAGS += --specs=nano.specs -lc -lnosys
+
+# Assembler flags
+ASMFLAGS += -x assembler-with-cpp
+ASMFLAGS += -DSWI_DISABLE0
+ASMFLAGS += -DBOARD_CUSTOM
+ASMFLAGS += -DSOFTDEVICE_PRESENT
+ASMFLAGS += -DNRF51
+ASMFLAGS += -DS110
+ASMFLAGS += -D__HEAP_SIZE=0
+ASMFLAGS += -DBLE_STACK_SUPPORT_REQD
+ASMFLAGS += -DBSP_DEFINES_ONLY
+#default target - first one defined
+default: clean nrf51822_xxaa
+
+#building all targets
+all: clean
+	$(NO_ECHO)$(MAKE) -f $(MAKEFILE_NAME) -C $(MAKEFILE_DIR) -e cleanobj
+	$(NO_ECHO)$(MAKE) -f $(MAKEFILE_NAME) -C $(MAKEFILE_DIR) -e nrf51822_xxaa
+
+#target for printing all targets
+help:
+	@echo following targets are available:
+	@echo 	nrf51822_xxaa
+
+
+C_SOURCE_FILE_NAMES = $(notdir $(C_SOURCE_FILES))
+C_PATHS = $(call remduplicates, $(dir $(C_SOURCE_FILES) ) )
+C_OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(C_SOURCE_FILE_NAMES:.c=.o) )
+
+ASM_SOURCE_FILE_NAMES = $(notdir $(ASM_SOURCE_FILES))
+ASM_PATHS = $(call remduplicates, $(dir $(ASM_SOURCE_FILES) ))
+ASM_OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(ASM_SOURCE_FILE_NAMES:.s=.o) )
+
+vpath %.c $(C_PATHS)
+vpath %.s $(ASM_PATHS)
+
+OBJECTS = $(C_OBJECTS) $(ASM_OBJECTS)
+
+nrf51822_xxaa: OUTPUT_FILENAME := nrf51822_xxaa
+nrf51822_xxaa: LINKER_SCRIPT=../../../dfu_gcc_nrf51.ld
+nrf51822_xxaa: $(BUILD_DIRECTORIES) $(OBJECTS)
+	@echo Linking target: $(OUTPUT_FILENAME).out
+	$(NO_ECHO)$(CC) $(LDFLAGS) $(OBJECTS) $(LIBS) -o $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
+	$(NO_ECHO)$(MAKE) -f $(MAKEFILE_NAME) -C $(MAKEFILE_DIR) -e finalize
+
+## Create build directories
+$(BUILD_DIRECTORIES):
+	echo $(MAKEFILE_NAME)
+	$(MK) $@
+
+# Create objects from C SRC files
+$(OBJECT_DIRECTORY)/%.o: %.c
+	@echo Compiling file: $(notdir $<)
+	$(NO_ECHO)$(CC) $(CFLAGS) $(INC_PATHS) -c -o $@ $<
+
+# Assemble files
+$(OBJECT_DIRECTORY)/%.o: %.s
+	@echo Compiling file: $(notdir $<)
+	$(NO_ECHO)$(CC) $(ASMFLAGS) $(INC_PATHS) -c -o $@ $<
+
+
+# Link
+$(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out: $(BUILD_DIRECTORIES) $(OBJECTS)
+	@echo Linking target: $(OUTPUT_FILENAME).out
+	$(NO_ECHO)$(CC) $(LDFLAGS) $(OBJECTS) $(LIBS) -o $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
+
+
+## Create binary .bin file from the .out file
+$(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin: $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
+	@echo Preparing: $(OUTPUT_FILENAME).bin
+	$(NO_ECHO)$(OBJCOPY) -O binary $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin
+
+## Create binary .hex file from the .out file
+$(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex: $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
+	@echo Preparing: $(OUTPUT_FILENAME).hex
+	$(NO_ECHO)$(OBJCOPY) -O ihex $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex
+
+finalize: genbin genhex echosize
+
+genbin:
+	@echo Preparing: $(OUTPUT_FILENAME).bin
+	$(NO_ECHO)$(OBJCOPY) -O binary $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin
+
+## Create binary .hex file from the .out file
+genhex:
+	@echo Preparing: $(OUTPUT_FILENAME).hex
+	$(NO_ECHO)$(OBJCOPY) -O ihex $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex
+
+echosize:
+	-@echo ""
+	$(NO_ECHO)$(SIZE) $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
+	-@echo ""
+
+clean:
+	$(RM) $(BUILD_DIRECTORIES)
+
+cleanobj:
+	$(RM) $(BUILD_DIRECTORIES)/*.o
+
+flash: $(MAKECMDGOALS)
+	@echo Flashing: $(OUTPUT_BINARY_DIRECTORY)/$<.hex
+	nrfjprog --reset --program $(OUTPUT_BINARY_DIRECTORY)/$<.hex
+
+## Flash softdevice
diff -wuprN -x Makefile.posix -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/makehex nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/makehex
--- nRF51_SDK_9.0.0_2e23562.orig/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/makehex	1970-01-01 09:00:00.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/examples/dfu/bootloader/nisse/dual_bank_ble_s110/armgcc/makehex	2015-09-08 22:02:01.000000000 +0900
@@ -0,0 +1,2 @@
+#!/bin/sh -xe
+srec_cat ../../../../../../../s110_nrf51_8.0.0/s110_nrf51_8.0.0_softdevice.hex -intel _build/nrf51822_xxaa.hex -intel -o bootloader_nisse_ble.0.1.hex -intel --line-length=44
