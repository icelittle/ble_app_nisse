diff -wuprN -x Makefile.posix -x custom_board.h -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/components/ble/device_manager/device_manager_peripheral.c nRF51_SDK_9.0.0_2e23562/components/ble/device_manager/device_manager_peripheral.c
--- nRF51_SDK_9.0.0_2e23562.orig/components/ble/device_manager/device_manager_peripheral.c	2015-07-10 00:21:08.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/components/ble/device_manager/device_manager_peripheral.c	2015-08-13 08:56:52.909845788 +0900
@@ -1,3 +1,10 @@
+/*
+ * Copyright 2015 Esrille Inc.
+ *
+ * This file is a modified version of device_manager_peripheral.c provided by
+ * Nordic Semiconductor for using Esrille New Keyboard.
+ */
+
 /* Copyright (C) 2013 Nordic Semiconductor. All Rights Reserved.
  *
  * The information contained herein is property of Nordic Semiconductor ASA.
@@ -1065,7 +1072,7 @@ static __INLINE ret_code_t gatts_context
                 memset(&m_gatts_table[p_handle->connection_id], 0, sizeof(dm_gatts_context_t));
             }
         }
-        else
+        /*else*/  // for Esrille New Keyboard
         {
             if (m_gatts_table[p_handle->connection_id].size != 0)
             {
@@ -2912,3 +2919,64 @@ ret_code_t dm_handle_get(uint16_t conn_h
     }
     return err_code;
 }
+
+//
+// Extensions by Esrille Inc.
+//
+
+extern uint8_t switch_get_current_device(void);
+
+ret_code_t switch_whitelist_create(dm_application_instance_t const * p_handle,
+                               ble_gap_whitelist_t             * p_whitelist)
+{
+    VERIFY_MODULE_INITIALIZED();
+    NULL_PARAM_CHECK(p_handle);
+    NULL_PARAM_CHECK(p_whitelist);
+    NULL_PARAM_CHECK(p_whitelist->pp_addrs);
+    NULL_PARAM_CHECK(p_whitelist->pp_irks);
+    VERIFY_APP_REGISTERED(*p_handle);
+
+    DM_MUTEX_LOCK();
+
+    DM_LOG("[DM]: >> switch_whitelist_create\r\n");
+
+    uint32_t addr_count = 0;
+    uint32_t irk_count  = 0;
+
+    uint32_t index = switch_get_current_device();
+    if (index < DEVICE_MANAGER_MAX_BONDS) {
+        if ((irk_count < p_whitelist->irk_count) &&
+            ((m_peer_table[index].id_bitmap & IRK_ENTRY) == 0))
+        {
+            p_whitelist->pp_irks[irk_count] = &m_peer_table[index].peer_id.id_info;
+            m_irk_index_table[irk_count]    = index;
+            irk_count++;
+        }
+
+        if ((addr_count < p_whitelist->addr_count) &&
+            (m_peer_table[index].id_bitmap & ADDR_ENTRY) == 0)
+        {
+            p_whitelist->pp_addrs[addr_count] = &m_peer_table[index].peer_id.id_addr_info;
+            addr_count++;
+        }
+    }
+
+    p_whitelist->addr_count = addr_count;
+    p_whitelist->irk_count  = irk_count;
+
+    if (0 < addr_count) {
+        app_trace_log("switch_whitelist_create [%lu]: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X.\r\n", index,
+            m_peer_table[index].peer_id.id_addr_info.addr[0],
+            m_peer_table[index].peer_id.id_addr_info.addr[1],
+            m_peer_table[index].peer_id.id_addr_info.addr[2],
+            m_peer_table[index].peer_id.id_addr_info.addr[3],
+            m_peer_table[index].peer_id.id_addr_info.addr[4],
+            m_peer_table[index].peer_id.id_addr_info.addr[5]);
+    }
+
+    DM_TRC("[DM]: << switch_whitelist_create\r\n");
+
+    DM_MUTEX_UNLOCK();
+
+    return NRF_SUCCESS;
+}
diff -wuprN -x Makefile.posix -x custom_board.h -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/components/drivers_nrf/gpiote/nrf_drv_gpiote.c nRF51_SDK_9.0.0_2e23562/components/drivers_nrf/gpiote/nrf_drv_gpiote.c
--- nRF51_SDK_9.0.0_2e23562.orig/components/drivers_nrf/gpiote/nrf_drv_gpiote.c	2015-07-10 00:21:08.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/components/drivers_nrf/gpiote/nrf_drv_gpiote.c	2015-08-13 05:41:37.529554913 +0900
@@ -456,6 +456,8 @@ uint32_t nrf_drv_gpiote_in_event_addr_ge
     return nrf_gpiote_event_addr_get(event);
 }
 
+// cf. https://devzone.nordicsemi.com/question/40670/sdk81-app_gpiote-and-nrf_drv_gpiote-conflict/?answer=40671#post-id-40671
+#if 0
 void GPIOTE_IRQHandler(void)
 {
     uint32_t status = 0;
@@ -537,4 +539,175 @@ void GPIOTE_IRQHandler(void)
         }
     }
 }
+#else
+typedef void (*app_gpiote_event_handler_t)(uint32_t event_pins_low_to_high,
+                                           uint32_t event_pins_high_to_low);
+
+/**@brief GPIOTE user type. */
+typedef struct
+{
+    uint32_t                   pins_mask;             /**< Mask defining which pins user wants to monitor. */
+    uint32_t                   pins_low_to_high_mask; /**< Mask defining which pins will generate events to this user when toggling low->high. */
+    uint32_t                   pins_high_to_low_mask; /**< Mask defining which pins will generate events to this user when toggling high->low. */
+    uint32_t                   sense_high_pins;       /**< Mask defining which pins are configured to generate GPIOTE interrupt on transition to high level. */
+    app_gpiote_event_handler_t event_handler;         /**< Pointer to function to be executed when an event occurs. */
+} gpiote_user_t;
+
+extern uint32_t        m_enabled_users_mask;          /**< Mask for tracking which users are enabled. */
+extern uint8_t         m_user_array_size;             /**< Size of user array. */
+extern uint8_t         m_user_count;                  /**< Number of registered users. */
+extern gpiote_user_t * mp_users;                      /**< Array of GPIOTE users. */
+
+void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins);
+void sense_level_disable(uint32_t pins);
+
+void GPIOTE_IRQHandler(void)
+{
+    uint32_t status = 0;
+    uint32_t input = 0;
+    uint32_t i;
+    uint32_t pins_changed        = 1;
+    uint32_t pins_sense_enabled  = 0;
+    uint32_t pins_sense_disabled = 0;
+    uint32_t pins_state          = NRF_GPIO->IN;
+
+      /* collect PORT status event, if event is set read pins state. Processing is postponed to the
+     * end of interrupt. */
+    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
+    {
+        nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
+        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
+        input = nrf_gpio_pins_read();
+    }
+
+    while (pins_changed)
+    {
+        // Check all users.
+        for (i = 0; i < m_user_count; i++)
+        {
+            gpiote_user_t * p_user = &mp_users[i];
+
+            // Check if user is enabled.
+            if (((1 << i) & m_enabled_users_mask) != 0)
+            {
+                uint32_t transition_pins;
+                uint32_t event_low_to_high = 0;
+                uint32_t event_high_to_low = 0;
+
+                pins_sense_enabled |= (p_user->pins_mask & ~pins_sense_disabled);
+
+                // Find set of pins on which there has been a transition.
+                transition_pins = (pins_state ^ ~p_user->sense_high_pins) & (p_user->pins_mask & ~pins_sense_disabled);
+
+                sense_level_disable(transition_pins);
+                pins_sense_disabled |= transition_pins;
+                pins_sense_enabled  &= ~pins_sense_disabled;
+
+                // Call user event handler if an event has occurred.
+                event_high_to_low |= (~pins_state & p_user->pins_high_to_low_mask) & transition_pins;
+                event_low_to_high |= (pins_state & p_user->pins_low_to_high_mask) & transition_pins;
+
+                if ((event_low_to_high | event_high_to_low) != 0)
+                {
+                    p_user->event_handler(event_low_to_high, event_high_to_low);
+                }
+            }
+        }
+
+        // Second read after setting sense.
+        // Check if any pins with sense enabled have changed while serving this interrupt.
+        pins_changed = (NRF_GPIO->IN ^ pins_state) & pins_sense_enabled;
+        pins_state  ^= pins_changed;
+    }
+        // Now re-enabling sense on all pins that have sense disabled.
+    // Note: a new interrupt might fire immediatly.
+    for (i = 0; i < m_user_count; i++)
+    {
+        gpiote_user_t * p_user = &mp_users[i];
+
+        // Check if user is enabled.
+        if (((1 << i) & m_enabled_users_mask) != 0)
+        {
+            if (pins_sense_disabled & p_user->pins_mask)
+            {
+                sense_level_toggle(p_user, pins_sense_disabled & p_user->pins_mask);
+            }
+        }
+    }
+
+    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
+    nrf_gpiote_events_t event = NRF_GPIOTE_EVENTS_IN_0;
+    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
+    for (i = 0; i < NUMBER_OF_GPIO_TE; i++)
+    {
+        if (nrf_gpiote_event_is_set(event) && nrf_gpiote_int_is_enabled(mask))
+        {
+            nrf_gpiote_event_clear(event);
+            status |= mask;
+        }
+        mask <<= 1;
+        /* Incrementing to next event, utilizing the fact that events are grouped together
+         * in ascending order. */
+        event = (nrf_gpiote_events_t)((uint32_t)event + sizeof(uint32_t));
+    }
+
+    /* collect PORT status event, if event is set read pins state. Processing is postponed to the
+     * end of interrupt. */
+    if (nrf_gpiote_event_is_set(NRF_GPIOTE_EVENTS_PORT))
+    {
+        nrf_gpiote_event_clear(NRF_GPIOTE_EVENTS_PORT);
+        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
+        input = nrf_gpio_pins_read();
+    }
+
+    /* Process pin events. */
+    if (status & NRF_GPIOTE_INT_IN_MASK)
+    {
+        mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
+        for (i = 0; i < NUMBER_OF_GPIO_TE; i++)
+        {
+            if (mask & status)
+            {
+                nrf_drv_gpiote_pin_t pin = nrf_gpiote_event_pin_get(i);
+                nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(i);
+                nrf_drv_gpiote_evt_handler_t handler = channel_handler_get(i);
+                handler(pin,polarity);
+            }
+            mask <<= 1;
+        }
+    }
+
+    if (status & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
+    {
+        /* Process port event. */
+        for (i = 0; i < GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS; i++)
+        {
+            if (m_cb.port_handlers_pins[i] != PIN_NOT_USED)
+            {
+                uint8_t pin_and_sense = m_cb.port_handlers_pins[i];
+                nrf_drv_gpiote_pin_t pin = (pin_and_sense & ~SENSE_FIELD_MASK);
+                nrf_drv_gpiote_evt_handler_t handler = channel_handler_get(channel_port_get(pin));
+                if (handler)
+                {
+                    nrf_gpiote_polarity_t polarity =
+                            (nrf_gpiote_polarity_t)((pin_and_sense & SENSE_FIELD_MASK) >> SENSE_FIELD_POS);
+                    mask = 1 << pin;
+                    nrf_gpio_pin_sense_t sense = nrf_gpio_pin_sense_get(pin);
+                    if (((mask & input) && (sense==NRF_GPIO_PIN_SENSE_HIGH)) ||
+                       (!(mask & input) && (sense==NRF_GPIO_PIN_SENSE_LOW))  )
+                    {
+                        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
+                        {
+                            nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
+                                    NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
+                            nrf_gpio_cfg_sense_set(pin, next_sense);
+                        }
+                        handler(pin, polarity);
+                    }
+                }
+            }
+        }
+    }
+}
+#endif
 //lint -restore
diff -wuprN -x Makefile.posix -x custom_board.h -x .directory -x ble_app_hids_keyboard -x ble_app_nisse nRF51_SDK_9.0.0_2e23562.orig/components/libraries/gpiote/app_gpiote.c nRF51_SDK_9.0.0_2e23562/components/libraries/gpiote/app_gpiote.c
--- nRF51_SDK_9.0.0_2e23562.orig/components/libraries/gpiote/app_gpiote.c	2015-07-10 00:21:08.000000000 +0900
+++ nRF51_SDK_9.0.0_2e23562/components/libraries/gpiote/app_gpiote.c	2015-08-13 05:41:37.529554913 +0900
@@ -32,10 +32,10 @@ typedef struct
 STATIC_ASSERT(sizeof(gpiote_user_t) <= GPIOTE_USER_NODE_SIZE);
 STATIC_ASSERT(sizeof(gpiote_user_t) % 4 == 0);
 
-static uint32_t        m_enabled_users_mask;          /**< Mask for tracking which users are enabled. */
-static uint8_t         m_user_array_size;             /**< Size of user array. */
-static uint8_t         m_user_count;                  /**< Number of registered users. */
-static gpiote_user_t * mp_users = NULL;               /**< Array of GPIOTE users. */
+uint32_t        m_enabled_users_mask;          /**< Mask for tracking which users are enabled. */
+uint8_t         m_user_array_size;             /**< Size of user array. */
+uint8_t         m_user_count;                  /**< Number of registered users. */
+gpiote_user_t * mp_users = NULL;               /**< Array of GPIOTE users. */
 
 
 /**@brief Function for toggling sense level for specified pins.
@@ -43,7 +43,7 @@ static gpiote_user_t * mp_users = NULL;
  * @param[in]   p_user   Pointer to user structure.
  * @param[in]   pins     Bitmask specifying for which pins the sense level is to be toggled.
  */
-static void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins)
+void sense_level_toggle(gpiote_user_t * p_user, uint32_t pins)
 {
     uint32_t pin_no;
 
@@ -74,7 +74,7 @@ static void sense_level_toggle(gpiote_us
 }
 
 
-static void sense_level_disable(uint32_t pins)
+void sense_level_disable(uint32_t pins)
 {
     uint32_t pin_no;
 
@@ -91,7 +91,8 @@ static void sense_level_disable(uint32_t
 }
 
 
-
+// cf. https://devzone.nordicsemi.com/question/40670/sdk81-app_gpiote-and-nrf_drv_gpiote-conflict/?answer=40671#post-id-40671
+#if 0
 /**@brief Function for handling the GPIOTE interrupt.
  */
 void GPIOTE_IRQHandler(void)
@@ -161,6 +162,7 @@ void GPIOTE_IRQHandler(void)
         }
     }
 }
+#endif
 
 
 /**@brief Function for sense disabling for all pins for specified user.
